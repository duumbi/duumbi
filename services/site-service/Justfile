package := 'package'
compile := 'compile'
docker_secrets :=`doppler secrets download --no-file --format docker`

# List tasks
[private]
default:
    @echo "Doppler Config:"
    @doppler configs get
    @echo ""
    @just --list

# Getting an access token for Site API
access_token:
    #!/usr/bin/env sh
    echo "ACCESS_TOKEN=$(doppler run -- just _access_token | jq -c --raw-output '.access_token')" > src/test/api/.env

_access_token:
    #!/usr/bin/env python3
    import http.client
    import os
    conn = http.client.HTTPSConnection(os.environ['AUTH_SITE_API_DOMAIN'])
    payload_temp = '"client_id":\"{client_id}\",\"client_secret\":\"{client_secret}\",\"audience\":\"{audience}\",\"grant_type\":\"client_credentials\"'
    payload = "{" + payload_temp.format(client_id=os.environ['AUTH_SITE_API_CLIENT_ID'], client_secret=os.environ['AUTH_SITE_API_CLIENT_SECRET'], audience=os.environ['AUTH_SITE_API_AUDIENCE']) + "}"
    headers = { 'content-type': "application/json" }
    conn.request("POST", "/oauth/token", payload, headers)
    res = conn.getresponse()
    data = res.read()
    print(data.decode("utf-8"))

# Build application
build GOAL=package:
    doppler run -- just _run {{GOAL}}

_build GOAL=package:
    mvn clean {{GOAL}}

# Launch application
dev GOAL=compile:
    doppler run -- just _build {{GOAL}}
    doppler run -- just _run

_run:
    mvn spring-boot:run -Dspring-boot.run.jvmArguments="-Dspring.profiles.active=dev"

build_image:
    docker rm -f site-service
    docker rmi -f site-service
    docker build -f Dockerfile -t site-service .

dev_container: build_image
    just run_container

run_container:
    doppler secrets download --no-file --format docker > .env
    docker run -d --name site-service --env-file .env -p 3010:3010 -d site-service
    rm .env





